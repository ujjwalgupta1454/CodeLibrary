ans 1 working
// Runtime: 8 ms, faster than 100.00% of C++ online submissions for Count Palindromic Subsequences.
// Memory Usage: 6.4 MB, less than 100.00% of C++ online submissions for Count Palindromic Subsequences.

#include <vector>
#include <string>

using namespace std;

long prefixCounts[10][11];  // Prefix counts for digit pairs and singles
long suffixCounts[10][11];  // Suffix counts for digit pairs and singles
const long MOD = 1e9 + 7;   // Modulus value for result

class Solution {
public:
    int countPalindromes(string s) {
        ios::sync_with_stdio(false);
        cin.tie(nullptr);

        int n = s.size();
        if (n < 5)
            return 0;

        long totalPalindromes = 0, currentCount = 0;
        const char * c = s.c_str();

        // Initialize prefix and suffix arrays
        for (int i = 0; i < 10; ++i) {
            for (int j = 0; j < 11; ++j) {
                prefixCounts[i][j] = suffixCounts[i][j] = 0;
            }
        }

        // Calculate prefix counts
        for (int i = 0; i <= n - 3; ++i) {
            int digit = c[i] - '0';
            for (int j = 0; j < 10; ++j) {
                prefixCounts[digit][j] += prefixCounts[j][10];
            }
            ++prefixCounts[digit][10];  // Count single digit occurrences
        }

        suffixCounts[c[n-1] - '0'][10] = 1;  // Initialize suffix count for last digit

        // Calculate suffix counts and update palindrome counts
        for (int i = n - 2; i >= 2; --i) {
            // Remove the contribution of (i-1)th character from prefix counts
            int prevDigit = c[i-1] - '0';
            --prefixCounts[prevDigit][10];
            for (int j = 0; j < 10; ++j) {
                prefixCounts[prevDigit][j] -= prefixCounts[j][10];
                currentCount -= prefixCounts[j][10] * suffixCounts[prevDigit][j];
            }

            // Add the contribution of ith character to suffix counts
            int currDigit = c[i] - '0';
            for (int j = 0; j < 10; ++j) {
                suffixCounts[currDigit][j] += suffixCounts[j][10];
                currentCount += prefixCounts[currDigit][j] * suffixCounts[j][10];
            }
            ++suffixCounts[currDigit][10];

            // Ensure currentCount is within bounds of MOD
            currentCount = (currentCount + MOD) % MOD;
            // Update total palindromes count
            totalPalindromes = (totalPalindromes + currentCount) % MOD;
        }

        return totalPalindromes;
    }
};
